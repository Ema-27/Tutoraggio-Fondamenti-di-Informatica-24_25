
5)Scrivere un programma per gestire un sistema di prenotazioni per una sala conferenze. Ogni prenotazione è rappresentata da una struct
 contenente il nome del cliente, la data (in formato stringa) e un array dinamico di servizi richiesti (ognuno rappresentato da una stringa).
 Il programma deve permettere di:

    Aggiungere una nuova prenotazione.
    Aggiungere un servizio a una prenotazione esistente.
    Stampare tutte le prenotazioni, includendo i servizi richiesti.
    Liberare la memoria allocata.



6)Gestione di un sistema bibliotecario

Un programma deve gestire un sistema di informazioni sui libri in una biblioteca. I dati sono organizzati come segue:

    Struct Libro
    Contiene:
        char titolo[50]: il titolo del libro.
        char autore[50]: il nome dell'autore.
        int anno: l'anno di pubblicazione.

    Struct Biblioteca
    Contiene:
        Un array di libri dinamico Libro *libri.
        Un intero numLibri che rappresenta il numero di libri presenti.

Scrivere un programma che includa le seguenti funzionalità:

    Aggiungere un nuovo libro alla biblioteca.
    Contare quanti libri sono stati pubblicati da un autore specifico.
    Trovare tutti i libri pubblicati in un determinato intervallo di anni.
    Stampare l'intero catalogo della biblioteca.
    Liberare correttamente la memoria allocata dinamicamente.


1)Scrivere una funzione differenzaMassima(int *arr, int n) che restituisce la differenza massima tra due elementi dell'array. 
La differenza è calcolata come |arr[i] - arr[j]| per ogni coppia (i, j).

Esempio:

    Input: arr = [2, 7, 3, 10]
    Output: 8 (|10 - 2| = 8).

2)Scrivere una funzione rimuoviDuplicati(int *arr, int n, int *nUnici) che restituisce un array con elementi unici.
Aggiorna nUnici con la lunghezza del nuovo array.

Esempio:

    Input: arr = [1, 2, 2, 3, 3, 4]
    Output: [1, 2, 3, 4], nUnici = 4.

3)Scrivere una funzione elementiFrequenti(int *arr, int n, int soglia, int *nFrequenti) che restituisce gli elementi che appaiono 
più volte della soglia.

Esempio:

    Input: arr = [1, 2, 2, 3, 3, 3, 4], soglia = 2
    Output: [2, 3], nFrequenti = 2.



Ricorsione:
Scrivere una funzione ricorsiva che verifica se un array di numeri interi è palindromo 
(cioè, se è uguale se letto da sinistra a destra e da destra a sinistra).
Calcolare la potenza a^b utilizzando la ricorsione.
Scrivere una funzione ricorsiva che, dato un array di numeri interi e un valore x, conta il numero di elementi nell'array che sono maggiori di x.

