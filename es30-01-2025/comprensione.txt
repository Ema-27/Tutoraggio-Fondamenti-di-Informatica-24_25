1)
#include <stdio.h>

int main() {
    int lista[] = {3, 6, 8, 16, 8, 16};
    int len_lista = sizeof(lista) / sizeof(lista[0]);
    int ok = 1; // Utilizza 1 per true e 0 per false
    int i = 0;

    while (i < len_lista / 2 && ok) {
        if (lista[i] > lista[len_lista - 1 - i]) {
            ok = 0; // Imposta 0 (false) se la condizione non è rispettata
        }
        i++;
    }

    if (ok) {
        printf("OK\n");
    } else {
        printf("NO\n");
    }

    return 0;
}

Si descriva sinteticamente la funzione svolta dal brano.

Il brano verifica se gli elementi nella prima metà sono minori dei corrispondenti elementi speculari nella seconda metà della lista
Il brano stamperà OK perchè lista[0]<lista[5], lista[1]<lista[4] e così via.




----------------------------------------------------------------
2)

#include <stdio.h>

int main() {
    int v[] = {1, 2, 3, 4, 6, 2, 1};
    int d = 7; // Lunghezza dell'array
    int s = 0;

    // Ciclo per confrontare gli elementi
    while (s < d && v[s] == v[d - 1]) {
        s++;
        d--;
    }

    if (s < d - 1) {
        printf("NO\n");
    } else {
        printf("SI\n");
    }

    return 0;
}

Si descriva sinteticamente la funzione svolta dal brano. 

Il codice verifica se la lista di Lunghezza d è palindroma, cioè il primo elemento è uguale all'ultimo (v[0]==v[d-1]), 
il secondo al penultimo (V[1]==v[d-2]) e così via.
Il codice stamperà NO perchè la condizione non è rispettata: il valore 3 è diverso dal valore 6.
-----------------------------------------------------------------

3)

#include <stdio.h>

int main() {
    int lista[] = {3, 2, 4, 7, 2, 3, 5};
    int len_lista = sizeof(lista) / sizeof(lista[0]);

    for (int i = 0; i < len_lista; i++) {
        if (i % 2 == 0 && lista[i] % 2 == 0) {
            printf("%d\n", lista[i]);
        }
        if (i % 2 != 0 && lista[i] % 2 != 0) {
            printf("%d\n", lista[i]);
        }
    }

    return 0;
}

Si descriva sinteticamente la funzione svolta dal brano. 

Il codice stampa gli elementi della lista che rispettano una delle seguenti condizioni:
-essere pari e in posizione pari
-essere dispari e in posizione dispari

il codice stamperà 4,7,2,3 in quanto lista[0]==3 val. disp. in pos. pari, lista[1]==2 viceversa a prima, lista[2]==4 la condizione è rispettata
pertanto verrà stampato 4... e così via

-----------------------------------------------------------------

4)
#include <stdio.h>
 
int main() {
    int x[] = {3, 2, 5, 4};
    int y[] = {8, 20, 6, 9};
    int d = 4;
    int n[d]; // Utilizza 0 per false e 1 per true
 
    // Inizializza l'array `n` a 0 (false)
    for (int i = 0; i < d; i++) {
        n[i] = 0;
    }
 
    // Esegue il ciclo principale
    for (int i = 0; i < d; i++) {
        if (y[i] % x[d - 1 - i] == 0) {
            n[i] = 1; // Imposta a 1 (true) se la condizione è soddisfatta
        }
    }
 
    // Stampa l'array `n` in modo leggibile
    printf("Risultato dell'array n:\n");
    for (int i = 0; i < d; i++) {
        printf("n[%d] = %d\n", i, n[i]);
    }
 
    return 0;
}

Si descriva sinteticamente la funzione svolta dal brano. 

Il codice verifica che ogni elemento della lista y sia divisibile per l'elemento speculare della lista x. L'outup sarà 1,1,1,1 
in quanto 8%4==0, 20%5==0 e così via.

-----------------------------------------------------------------

5)

#include <stdio.h>

void funzione_esercizio(int x, int l[], int len) {
    int i = 0;
    while (i < len) {
        if (l[i] % x != 0) {
            l[i] = 0;
        } else {
            l[i] /= x; // Divisione intera
        }
        i++;
    }
}

int main() {
    int lista[] = {9, 6, 2, 7, 15, 10};
    int valore = 3;
    int len_lista = sizeof(lista) / sizeof(lista[0]);

    // Chiamata alla funzione
    funzione_esercizio(valore, lista, len_lista);

    // Stampa dei risultati
    for (int i = 0; i < len_lista; i++) {
        if (lista[i] != 0) {
            printf("%d\n", lista[i]);
        }
    }

    return 0;
}

Si descriva sinteticamente il comportamento della funzione “funzione_esercizio(x, l)” e si indichino 
gli output prodotti dal brano. 

La funzione verifica quali elementi della lista l sono divisibili per x, in particolare se l'i-esimo elemento della lista è divisibile per x 
viene posto pari quoziente della divisione, altrimenti viene posto pari a 0.
Il brano stampa gli elementi diversi da 0 della lista ottenuta

l'output è: 3  -> (9/3), 2(6/3) e 5(15/3)